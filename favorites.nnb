{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "function fun(){\n  console.log(\"Hello World\")\n}\nfun()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function fun(str){\n  console.log(str)\n}\nfun('Function Call')"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const fun = () => console.log('Hello World')\nfun()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "(() => console.log('Hello World'))()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function fun() {\n  return 4;\n}\n\nconst num = fun();\nconsole.log(num)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const fun = () => 8\nconst num = fun();\n\nconsole.log(num)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const fun = () => {\n  8\n} \nconst num = fun();\n\nconsole.log(num)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const fun = () => 'Hello World'\n\nfun()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const fun = () => console.log('Hello World')\n\nconst returnValue = fun()\n\nconsole.log(returnValue);"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const returnValue = console.log('Hello World')\n\nconsole.log(returnValue);"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const returnValue = console.log.toString()\n\nconsole.log(returnValue);"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const log = (msg) => console.log(msg) || msg\n\nlog('Hello World')"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const log = (...args) => {\n  console.log(...args)\n  return [...args]\n}\n\nlog('Hello','World')"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const pow = x => x * x\npow(5)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const pow = x => {\n  x * x\n}\npow(5)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const pow = x => {\n  return x * x\n}\npow(5)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const add = (x,y) => {\n  return x + y\n}\nadd(5,3)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "class Person {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n  getName(){\n    return this.name\n  }\n  getAge(){\n    return this.age\n  }\n}\n\nlet tobi = new Person('Tobi', '29')\nconsole.log(tobi.getName(), tobi.getAge())\nconsole.log(tobi.name, tobi.age)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const person = (name, age) => ({\n  name,\n  age,\n  getName: () => name,\n  getAge: () => age\n})\n\nlet kevin = person('Kevin', '28')\nconsole.log(kevin.getName(), kevin.getAge())\nconsole.log(kevin.name, kevin.age)\nconsole.log(kevin)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const alice = {\n  name: 'alice',\n  age: '20'\n}\n\nconst name = alice.name\nconst age = alice.age\n\nconsole.log(name, age);"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const alice = {\n  name: 'alice',\n  age: '20'\n}\n\nconst {name, age} = alice\n\nconsole.log(name, age);"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const students = ['alice', 'bob']\n\nconst [alice, bob] = students\n\nconsole.log(alice, bob);"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "if (true) {\n  console.log(\"It's true!\")\n} else {\n  console.log('not true')\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "console.log(true ? \"It's true!\" : 'not true')"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const arr = [1,2,3,4,5]\narr.map(x => x ** x)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const arr = [1,2,3,4,5]\narr.map(x => x ** x)\n\nconsole.log(arr)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const arr = [1,2,3,4,5]\nconst arr2 = arr.map(x => x ** x)\n\nconsole.log(arr2)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const arr = [1,2,3,4,5]\nconst arr2 = arr.map(x => x % 2 === 0 ? x : x ** x)\n\nconsole.log(arr2)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const a = () => a\na()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const a = (x) => x\na(a)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const fib = x => x <= 1 ? x : fib(x-1) + fib(x-2)\nfib(7)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const fac = x => x > 1 ? x * fac(x-1) : 1\n\nfac(7)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const add = a => b => a + b\nadd(5)(5)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const add = a => b => a + b\nconst add3 = add(3)\nadd3(3)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const log = prefix => errormsg => console.log(`${prefix}: ${errormsg}`) \nconst w_log = log('waring')\nconst e_log = log('error')\nconst i_log = log('info')\n\ne_log('app crashed')\nw_log('app runs close to the memory limit')\ni_log('access by user: SRU')\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const add = a => b => a + b\nconst add3 = add(3)\nconsole.log(add3.toString())"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "a => b => a + b\n3 => b => 3 + b\n3 => (b => 3 + b) <-- return values"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const t = a => b => a;\nconst f = a => b => b;\n\nconsole.log(t(true)(false));"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const not = f => a => b => f(b)(a);\nconst not_true = not(t)\nconst not_false = not(f)\n\nconsole.log(\n  not_true(false)(true),\n  not(t)(false)(true),\n  not_false(true)(false),\n  not(f)(true)(false),\n  '\\n',\n  not(f).toString()\n);"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const and = a => b => a(b)(a)\nconsole.log(\n  and(t)(t),\n  and(t)(f),\n  and(f)(t),\n  and(f)(f)\n)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const or = a => b => a(a)(b)\nconsole.log(\n  or(t)(t),\n  or(t)(f),\n  or(f)(t),\n  or(f)(f)\n)"
            ],
            "outputs": []
        }
    ]
}
